Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program global_statement
Rule 2     program -> global_statement
Rule 3     global_statement -> variable_declaration
Rule 4     global_statement -> function_definition
Rule 5     global_statement -> function_declaration
Rule 6     variable_declaration -> type id_list SEMI
Rule 7     type -> INT
Rule 8     type -> CHAR
Rule 9     type -> STRING
Rule 10    id_list -> id_list COMMA ID
Rule 11    id_list -> ID
Rule 12    function_declaration -> type ID LPAREN arg_types RPAREN SEMI
Rule 13    function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI
Rule 14    function_declaration -> void_arg_function SEMI
Rule 15    arg_types -> arg_types COMMA type
Rule 16    arg_types -> type
Rule 17    void_arg_function -> type ID LPAREN VOID RPAREN
Rule 18    void_arg_function -> VOID ID LPAREN VOID RPAREN
Rule 19    function_definition -> function_header LBRACE block RBRACE
Rule 20    function_header -> type ID LPAREN args RPAREN
Rule 21    function_header -> void_arg_function
Rule 22    args -> args COMMA type ID
Rule 23    args -> type ID
Rule 24    block -> empty
Rule 25    block -> statement_list
Rule 26    block_body -> block_start block_end
Rule 27    block_start -> LBRACE
Rule 28    block_end -> block RBRACE
Rule 29    statement_list -> statement_list statement
Rule 30    statement_list -> statement
Rule 31    statement -> variable_declaration
Rule 32    statement -> assignment
Rule 33    statement -> return
Rule 34    statement -> if_statement
Rule 35    statement -> loop_statement
Rule 36    statement -> function_call
Rule 37    function_call -> ID LPAREN expr_list RPAREN SEMI
Rule 38    loop_statement -> WHILE LPAREN expr RPAREN block_body
Rule 39    if_statement -> IF LPAREN expr RPAREN block_body if_false
Rule 40    if_false -> ELSE block_body
Rule 41    return -> RETURN expr SEMI
Rule 42    return -> RETURN SEMI
Rule 43    assignment -> ID ASSIGN expr SEMI
Rule 44    expr -> expr PLUS expr
Rule 45    expr -> expr MINUS expr
Rule 46    expr -> expr TIMES expr
Rule 47    expr -> expr DIVIDE expr
Rule 48    expr -> expr MODULO expr
Rule 49    expr -> CINT
Rule 50    expr -> CCHAR
Rule 51    expr -> CSTRING
Rule 52    expr -> ID
Rule 53    expr -> LPAREN expr RPAREN
Rule 54    expr -> MINUS expr
Rule 55    expr -> ID LPAREN expr_list RPAREN
Rule 56    expr_list -> nonempty_expr_list
Rule 57    expr_list -> empty
Rule 58    nonempty_expr_list -> nonempty_expr_list COMMA expr
Rule 59    nonempty_expr_list -> expr
Rule 60    expr -> LPAREN type RPAREN expr
Rule 61    expr -> expr OR expr
Rule 62    expr -> expr AND expr
Rule 63    expr -> NOT expr
Rule 64    expr -> expr EQ expr
Rule 65    expr -> expr NE expr
Rule 66    expr -> expr LT expr
Rule 67    expr -> expr LE expr
Rule 68    expr -> expr GT expr
Rule 69    expr -> expr GE expr
Rule 70    empty -> <empty>

Terminals, with rules where they appear

AND                  : 62
ASSIGN               : 43
CCHAR                : 50
CHAR                 : 8
CINT                 : 49
COMMA                : 10 15 22 58
CSTRING              : 51
DIVIDE               : 47
ELSE                 : 40
EQ                   : 64
GE                   : 69
GT                   : 68
ID                   : 10 11 12 13 17 18 20 22 23 37 43 52 55
IF                   : 39
INT                  : 7
LBRACE               : 19 27
LE                   : 67
LPAREN               : 12 13 17 18 20 37 38 39 53 55 60
LT                   : 66
MINUS                : 45 54
MODULO               : 48
NE                   : 65
NOT                  : 63
OR                   : 61
PLUS                 : 44
RBRACE               : 19 28
RETURN               : 41 42
RPAREN               : 12 13 17 18 20 37 38 39 53 55 60
SEMI                 : 6 12 13 14 37 41 42 43
STRING               : 9
TIMES                : 46
VOID                 : 13 17 18 18
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

arg_types            : 12 13 15
args                 : 20 22
assignment           : 32
block                : 19 28
block_body           : 38 39 40
block_end            : 26
block_start          : 26
empty                : 24 57
expr                 : 38 39 41 43 44 44 45 45 46 46 47 47 48 48 53 54 58 59 60 61 61 62 62 63 64 64 65 65 66 66 67 67 68 68 69 69
expr_list            : 37 55
function_call        : 36
function_declaration : 5
function_definition  : 4
function_header      : 19
global_statement     : 1 2
id_list              : 6 10
if_false             : 39
if_statement         : 34
loop_statement       : 35
nonempty_expr_list   : 56 58
program              : 1 0
return               : 33
statement            : 29 30
statement_list       : 25 29
type                 : 6 12 15 16 17 20 22 23 60
variable_declaration : 3 31
void_arg_function    : 14 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program global_statement
    (2) program -> . global_statement
    (3) global_statement -> . variable_declaration
    (4) global_statement -> . function_definition
    (5) global_statement -> . function_declaration
    (6) variable_declaration -> . type id_list SEMI
    (19) function_definition -> . function_header LBRACE block RBRACE
    (12) function_declaration -> . type ID LPAREN arg_types RPAREN SEMI
    (13) function_declaration -> . VOID ID LPAREN arg_types RPAREN SEMI
    (14) function_declaration -> . void_arg_function SEMI
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING
    (20) function_header -> . type ID LPAREN args RPAREN
    (21) function_header -> . void_arg_function
    (17) void_arg_function -> . type ID LPAREN VOID RPAREN
    (18) void_arg_function -> . VOID ID LPAREN VOID RPAREN

    VOID            shift and go to state 1
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    function_header                shift and go to state 5
    program                        shift and go to state 6
    global_statement               shift and go to state 9
    type                           shift and go to state 7
    variable_declaration           shift and go to state 3
    void_arg_function              shift and go to state 4

state 1

    (13) function_declaration -> VOID . ID LPAREN arg_types RPAREN SEMI
    (18) void_arg_function -> VOID . ID LPAREN VOID RPAREN

    ID              shift and go to state 13


state 2

    (8) type -> CHAR .

    ID              reduce using rule 8 (type -> CHAR .)
    RPAREN          reduce using rule 8 (type -> CHAR .)
    COMMA           reduce using rule 8 (type -> CHAR .)


state 3

    (3) global_statement -> variable_declaration .

    VOID            reduce using rule 3 (global_statement -> variable_declaration .)
    INT             reduce using rule 3 (global_statement -> variable_declaration .)
    CHAR            reduce using rule 3 (global_statement -> variable_declaration .)
    STRING          reduce using rule 3 (global_statement -> variable_declaration .)
    $end            reduce using rule 3 (global_statement -> variable_declaration .)


state 4

    (14) function_declaration -> void_arg_function . SEMI
    (21) function_header -> void_arg_function .

    SEMI            shift and go to state 14
    LBRACE          reduce using rule 21 (function_header -> void_arg_function .)


state 5

    (19) function_definition -> function_header . LBRACE block RBRACE

    LBRACE          shift and go to state 15


state 6

    (0) S' -> program .
    (1) program -> program . global_statement
    (3) global_statement -> . variable_declaration
    (4) global_statement -> . function_definition
    (5) global_statement -> . function_declaration
    (6) variable_declaration -> . type id_list SEMI
    (19) function_definition -> . function_header LBRACE block RBRACE
    (12) function_declaration -> . type ID LPAREN arg_types RPAREN SEMI
    (13) function_declaration -> . VOID ID LPAREN arg_types RPAREN SEMI
    (14) function_declaration -> . void_arg_function SEMI
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING
    (20) function_header -> . type ID LPAREN args RPAREN
    (21) function_header -> . void_arg_function
    (17) void_arg_function -> . type ID LPAREN VOID RPAREN
    (18) void_arg_function -> . VOID ID LPAREN VOID RPAREN

    VOID            shift and go to state 1
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    function_definition            shift and go to state 10
    function_declaration           shift and go to state 11
    function_header                shift and go to state 5
    global_statement               shift and go to state 16
    type                           shift and go to state 7
    variable_declaration           shift and go to state 3
    void_arg_function              shift and go to state 4

state 7

    (6) variable_declaration -> type . id_list SEMI
    (12) function_declaration -> type . ID LPAREN arg_types RPAREN SEMI
    (20) function_header -> type . ID LPAREN args RPAREN
    (17) void_arg_function -> type . ID LPAREN VOID RPAREN
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 18

    id_list                        shift and go to state 17

state 8

    (9) type -> STRING .

    ID              reduce using rule 9 (type -> STRING .)
    RPAREN          reduce using rule 9 (type -> STRING .)
    COMMA           reduce using rule 9 (type -> STRING .)


state 9

    (2) program -> global_statement .

    VOID            reduce using rule 2 (program -> global_statement .)
    INT             reduce using rule 2 (program -> global_statement .)
    CHAR            reduce using rule 2 (program -> global_statement .)
    STRING          reduce using rule 2 (program -> global_statement .)
    $end            reduce using rule 2 (program -> global_statement .)


state 10

    (4) global_statement -> function_definition .

    VOID            reduce using rule 4 (global_statement -> function_definition .)
    INT             reduce using rule 4 (global_statement -> function_definition .)
    CHAR            reduce using rule 4 (global_statement -> function_definition .)
    STRING          reduce using rule 4 (global_statement -> function_definition .)
    $end            reduce using rule 4 (global_statement -> function_definition .)


state 11

    (5) global_statement -> function_declaration .

    VOID            reduce using rule 5 (global_statement -> function_declaration .)
    INT             reduce using rule 5 (global_statement -> function_declaration .)
    CHAR            reduce using rule 5 (global_statement -> function_declaration .)
    STRING          reduce using rule 5 (global_statement -> function_declaration .)
    $end            reduce using rule 5 (global_statement -> function_declaration .)


state 12

    (7) type -> INT .

    ID              reduce using rule 7 (type -> INT .)
    RPAREN          reduce using rule 7 (type -> INT .)
    COMMA           reduce using rule 7 (type -> INT .)


state 13

    (13) function_declaration -> VOID ID . LPAREN arg_types RPAREN SEMI
    (18) void_arg_function -> VOID ID . LPAREN VOID RPAREN

    LPAREN          shift and go to state 19


state 14

    (14) function_declaration -> void_arg_function SEMI .

    VOID            reduce using rule 14 (function_declaration -> void_arg_function SEMI .)
    INT             reduce using rule 14 (function_declaration -> void_arg_function SEMI .)
    CHAR            reduce using rule 14 (function_declaration -> void_arg_function SEMI .)
    STRING          reduce using rule 14 (function_declaration -> void_arg_function SEMI .)
    $end            reduce using rule 14 (function_declaration -> void_arg_function SEMI .)


state 15

    (19) function_definition -> function_header LBRACE . block RBRACE
    (24) block -> . empty
    (25) block -> . statement_list
    (70) empty -> .
    (29) statement_list -> . statement_list statement
    (30) statement_list -> . statement
    (31) statement -> . variable_declaration
    (32) statement -> . assignment
    (33) statement -> . return
    (34) statement -> . if_statement
    (35) statement -> . loop_statement
    (36) statement -> . function_call
    (6) variable_declaration -> . type id_list SEMI
    (43) assignment -> . ID ASSIGN expr SEMI
    (41) return -> . RETURN expr SEMI
    (42) return -> . RETURN SEMI
    (39) if_statement -> . IF LPAREN expr RPAREN block_body if_false
    (38) loop_statement -> . WHILE LPAREN expr RPAREN block_body
    (37) function_call -> . ID LPAREN expr_list RPAREN SEMI
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    RBRACE          reduce using rule 70 (empty -> .)
    ID              shift and go to state 31
    RETURN          shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 23
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    return                         shift and go to state 29
    loop_statement                 shift and go to state 21
    assignment                     shift and go to state 30
    function_call                  shift and go to state 22
    block                          shift and go to state 34
    statement                      shift and go to state 25
    statement_list                 shift and go to state 33
    if_statement                   shift and go to state 26
    type                           shift and go to state 27
    variable_declaration           shift and go to state 24
    empty                          shift and go to state 28

state 16

    (1) program -> program global_statement .

    VOID            reduce using rule 1 (program -> program global_statement .)
    INT             reduce using rule 1 (program -> program global_statement .)
    CHAR            reduce using rule 1 (program -> program global_statement .)
    STRING          reduce using rule 1 (program -> program global_statement .)
    $end            reduce using rule 1 (program -> program global_statement .)


state 17

    (6) variable_declaration -> type id_list . SEMI
    (10) id_list -> id_list . COMMA ID

    SEMI            shift and go to state 36
    COMMA           shift and go to state 35


state 18

    (12) function_declaration -> type ID . LPAREN arg_types RPAREN SEMI
    (20) function_header -> type ID . LPAREN args RPAREN
    (17) void_arg_function -> type ID . LPAREN VOID RPAREN
    (11) id_list -> ID .

    LPAREN          shift and go to state 37
    SEMI            reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)


state 19

    (13) function_declaration -> VOID ID LPAREN . arg_types RPAREN SEMI
    (18) void_arg_function -> VOID ID LPAREN . VOID RPAREN
    (15) arg_types -> . arg_types COMMA type
    (16) arg_types -> . type
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    VOID            shift and go to state 38
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    arg_types                      shift and go to state 39
    type                           shift and go to state 40

state 20

    (41) return -> RETURN . expr SEMI
    (42) return -> RETURN . SEMI
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    SEMI            shift and go to state 43
    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 47

state 21

    (35) statement -> loop_statement .

    ID              reduce using rule 35 (statement -> loop_statement .)
    RETURN          reduce using rule 35 (statement -> loop_statement .)
    IF              reduce using rule 35 (statement -> loop_statement .)
    WHILE           reduce using rule 35 (statement -> loop_statement .)
    INT             reduce using rule 35 (statement -> loop_statement .)
    CHAR            reduce using rule 35 (statement -> loop_statement .)
    STRING          reduce using rule 35 (statement -> loop_statement .)
    RBRACE          reduce using rule 35 (statement -> loop_statement .)


state 22

    (36) statement -> function_call .

    ID              reduce using rule 36 (statement -> function_call .)
    RETURN          reduce using rule 36 (statement -> function_call .)
    IF              reduce using rule 36 (statement -> function_call .)
    WHILE           reduce using rule 36 (statement -> function_call .)
    INT             reduce using rule 36 (statement -> function_call .)
    CHAR            reduce using rule 36 (statement -> function_call .)
    STRING          reduce using rule 36 (statement -> function_call .)
    RBRACE          reduce using rule 36 (statement -> function_call .)


state 23

    (38) loop_statement -> WHILE . LPAREN expr RPAREN block_body

    LPAREN          shift and go to state 50


state 24

    (31) statement -> variable_declaration .

    ID              reduce using rule 31 (statement -> variable_declaration .)
    RETURN          reduce using rule 31 (statement -> variable_declaration .)
    IF              reduce using rule 31 (statement -> variable_declaration .)
    WHILE           reduce using rule 31 (statement -> variable_declaration .)
    INT             reduce using rule 31 (statement -> variable_declaration .)
    CHAR            reduce using rule 31 (statement -> variable_declaration .)
    STRING          reduce using rule 31 (statement -> variable_declaration .)
    RBRACE          reduce using rule 31 (statement -> variable_declaration .)


state 25

    (30) statement_list -> statement .

    ID              reduce using rule 30 (statement_list -> statement .)
    RETURN          reduce using rule 30 (statement_list -> statement .)
    IF              reduce using rule 30 (statement_list -> statement .)
    WHILE           reduce using rule 30 (statement_list -> statement .)
    INT             reduce using rule 30 (statement_list -> statement .)
    CHAR            reduce using rule 30 (statement_list -> statement .)
    STRING          reduce using rule 30 (statement_list -> statement .)
    RBRACE          reduce using rule 30 (statement_list -> statement .)


state 26

    (34) statement -> if_statement .

    ID              reduce using rule 34 (statement -> if_statement .)
    RETURN          reduce using rule 34 (statement -> if_statement .)
    IF              reduce using rule 34 (statement -> if_statement .)
    WHILE           reduce using rule 34 (statement -> if_statement .)
    INT             reduce using rule 34 (statement -> if_statement .)
    CHAR            reduce using rule 34 (statement -> if_statement .)
    STRING          reduce using rule 34 (statement -> if_statement .)
    RBRACE          reduce using rule 34 (statement -> if_statement .)


state 27

    (6) variable_declaration -> type . id_list SEMI
    (10) id_list -> . id_list COMMA ID
    (11) id_list -> . ID

    ID              shift and go to state 51

    id_list                        shift and go to state 17

state 28

    (24) block -> empty .

    RBRACE          reduce using rule 24 (block -> empty .)


state 29

    (33) statement -> return .

    ID              reduce using rule 33 (statement -> return .)
    RETURN          reduce using rule 33 (statement -> return .)
    IF              reduce using rule 33 (statement -> return .)
    WHILE           reduce using rule 33 (statement -> return .)
    INT             reduce using rule 33 (statement -> return .)
    CHAR            reduce using rule 33 (statement -> return .)
    STRING          reduce using rule 33 (statement -> return .)
    RBRACE          reduce using rule 33 (statement -> return .)


state 30

    (32) statement -> assignment .

    ID              reduce using rule 32 (statement -> assignment .)
    RETURN          reduce using rule 32 (statement -> assignment .)
    IF              reduce using rule 32 (statement -> assignment .)
    WHILE           reduce using rule 32 (statement -> assignment .)
    INT             reduce using rule 32 (statement -> assignment .)
    CHAR            reduce using rule 32 (statement -> assignment .)
    STRING          reduce using rule 32 (statement -> assignment .)
    RBRACE          reduce using rule 32 (statement -> assignment .)


state 31

    (43) assignment -> ID . ASSIGN expr SEMI
    (37) function_call -> ID . LPAREN expr_list RPAREN SEMI

    ASSIGN          shift and go to state 52
    LPAREN          shift and go to state 53


state 32

    (39) if_statement -> IF . LPAREN expr RPAREN block_body if_false

    LPAREN          shift and go to state 54


state 33

    (25) block -> statement_list .
    (29) statement_list -> statement_list . statement
    (31) statement -> . variable_declaration
    (32) statement -> . assignment
    (33) statement -> . return
    (34) statement -> . if_statement
    (35) statement -> . loop_statement
    (36) statement -> . function_call
    (6) variable_declaration -> . type id_list SEMI
    (43) assignment -> . ID ASSIGN expr SEMI
    (41) return -> . RETURN expr SEMI
    (42) return -> . RETURN SEMI
    (39) if_statement -> . IF LPAREN expr RPAREN block_body if_false
    (38) loop_statement -> . WHILE LPAREN expr RPAREN block_body
    (37) function_call -> . ID LPAREN expr_list RPAREN SEMI
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    RBRACE          reduce using rule 25 (block -> statement_list .)
    ID              shift and go to state 31
    RETURN          shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 23
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    return                         shift and go to state 29
    loop_statement                 shift and go to state 21
    assignment                     shift and go to state 30
    function_call                  shift and go to state 22
    statement                      shift and go to state 55
    if_statement                   shift and go to state 26
    type                           shift and go to state 27
    variable_declaration           shift and go to state 24

state 34

    (19) function_definition -> function_header LBRACE block . RBRACE

    RBRACE          shift and go to state 56


state 35

    (10) id_list -> id_list COMMA . ID

    ID              shift and go to state 57


state 36

    (6) variable_declaration -> type id_list SEMI .

    VOID            reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    INT             reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    CHAR            reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    STRING          reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    $end            reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    ID              reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    RETURN          reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    IF              reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    WHILE           reduce using rule 6 (variable_declaration -> type id_list SEMI .)
    RBRACE          reduce using rule 6 (variable_declaration -> type id_list SEMI .)


state 37

    (12) function_declaration -> type ID LPAREN . arg_types RPAREN SEMI
    (20) function_header -> type ID LPAREN . args RPAREN
    (17) void_arg_function -> type ID LPAREN . VOID RPAREN
    (15) arg_types -> . arg_types COMMA type
    (16) arg_types -> . type
    (22) args -> . args COMMA type ID
    (23) args -> . type ID
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    VOID            shift and go to state 58
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    arg_types                      shift and go to state 60
    type                           shift and go to state 61
    args                           shift and go to state 59

state 38

    (18) void_arg_function -> VOID ID LPAREN VOID . RPAREN

    RPAREN          shift and go to state 62


state 39

    (13) function_declaration -> VOID ID LPAREN arg_types . RPAREN SEMI
    (15) arg_types -> arg_types . COMMA type

    RPAREN          shift and go to state 63
    COMMA           shift and go to state 64


state 40

    (16) arg_types -> type .

    RPAREN          reduce using rule 16 (arg_types -> type .)
    COMMA           reduce using rule 16 (arg_types -> type .)


state 41

    (54) expr -> MINUS . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 65

state 42

    (50) expr -> CCHAR .

    PLUS            reduce using rule 50 (expr -> CCHAR .)
    MINUS           reduce using rule 50 (expr -> CCHAR .)
    TIMES           reduce using rule 50 (expr -> CCHAR .)
    DIVIDE          reduce using rule 50 (expr -> CCHAR .)
    MODULO          reduce using rule 50 (expr -> CCHAR .)
    OR              reduce using rule 50 (expr -> CCHAR .)
    AND             reduce using rule 50 (expr -> CCHAR .)
    EQ              reduce using rule 50 (expr -> CCHAR .)
    NE              reduce using rule 50 (expr -> CCHAR .)
    LT              reduce using rule 50 (expr -> CCHAR .)
    LE              reduce using rule 50 (expr -> CCHAR .)
    GT              reduce using rule 50 (expr -> CCHAR .)
    GE              reduce using rule 50 (expr -> CCHAR .)
    SEMI            reduce using rule 50 (expr -> CCHAR .)
    RPAREN          reduce using rule 50 (expr -> CCHAR .)
    COMMA           reduce using rule 50 (expr -> CCHAR .)


state 43

    (42) return -> RETURN SEMI .

    ID              reduce using rule 42 (return -> RETURN SEMI .)
    RETURN          reduce using rule 42 (return -> RETURN SEMI .)
    IF              reduce using rule 42 (return -> RETURN SEMI .)
    WHILE           reduce using rule 42 (return -> RETURN SEMI .)
    INT             reduce using rule 42 (return -> RETURN SEMI .)
    CHAR            reduce using rule 42 (return -> RETURN SEMI .)
    STRING          reduce using rule 42 (return -> RETURN SEMI .)
    RBRACE          reduce using rule 42 (return -> RETURN SEMI .)


state 44

    (51) expr -> CSTRING .

    PLUS            reduce using rule 51 (expr -> CSTRING .)
    MINUS           reduce using rule 51 (expr -> CSTRING .)
    TIMES           reduce using rule 51 (expr -> CSTRING .)
    DIVIDE          reduce using rule 51 (expr -> CSTRING .)
    MODULO          reduce using rule 51 (expr -> CSTRING .)
    OR              reduce using rule 51 (expr -> CSTRING .)
    AND             reduce using rule 51 (expr -> CSTRING .)
    EQ              reduce using rule 51 (expr -> CSTRING .)
    NE              reduce using rule 51 (expr -> CSTRING .)
    LT              reduce using rule 51 (expr -> CSTRING .)
    LE              reduce using rule 51 (expr -> CSTRING .)
    GT              reduce using rule 51 (expr -> CSTRING .)
    GE              reduce using rule 51 (expr -> CSTRING .)
    SEMI            reduce using rule 51 (expr -> CSTRING .)
    RPAREN          reduce using rule 51 (expr -> CSTRING .)
    COMMA           reduce using rule 51 (expr -> CSTRING .)


state 45

    (53) expr -> LPAREN . expr RPAREN
    (60) expr -> LPAREN . type RPAREN expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    expr                           shift and go to state 67
    type                           shift and go to state 66

state 46

    (52) expr -> ID .
    (55) expr -> ID . LPAREN expr_list RPAREN

    PLUS            reduce using rule 52 (expr -> ID .)
    MINUS           reduce using rule 52 (expr -> ID .)
    TIMES           reduce using rule 52 (expr -> ID .)
    DIVIDE          reduce using rule 52 (expr -> ID .)
    MODULO          reduce using rule 52 (expr -> ID .)
    OR              reduce using rule 52 (expr -> ID .)
    AND             reduce using rule 52 (expr -> ID .)
    EQ              reduce using rule 52 (expr -> ID .)
    NE              reduce using rule 52 (expr -> ID .)
    LT              reduce using rule 52 (expr -> ID .)
    LE              reduce using rule 52 (expr -> ID .)
    GT              reduce using rule 52 (expr -> ID .)
    GE              reduce using rule 52 (expr -> ID .)
    SEMI            reduce using rule 52 (expr -> ID .)
    RPAREN          reduce using rule 52 (expr -> ID .)
    COMMA           reduce using rule 52 (expr -> ID .)
    LPAREN          shift and go to state 68


state 47

    (41) return -> RETURN expr . SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    SEMI            shift and go to state 72
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 48

    (63) expr -> NOT . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 83

state 49

    (49) expr -> CINT .

    PLUS            reduce using rule 49 (expr -> CINT .)
    MINUS           reduce using rule 49 (expr -> CINT .)
    TIMES           reduce using rule 49 (expr -> CINT .)
    DIVIDE          reduce using rule 49 (expr -> CINT .)
    MODULO          reduce using rule 49 (expr -> CINT .)
    OR              reduce using rule 49 (expr -> CINT .)
    AND             reduce using rule 49 (expr -> CINT .)
    EQ              reduce using rule 49 (expr -> CINT .)
    NE              reduce using rule 49 (expr -> CINT .)
    LT              reduce using rule 49 (expr -> CINT .)
    LE              reduce using rule 49 (expr -> CINT .)
    GT              reduce using rule 49 (expr -> CINT .)
    GE              reduce using rule 49 (expr -> CINT .)
    SEMI            reduce using rule 49 (expr -> CINT .)
    RPAREN          reduce using rule 49 (expr -> CINT .)
    COMMA           reduce using rule 49 (expr -> CINT .)


state 50

    (38) loop_statement -> WHILE LPAREN . expr RPAREN block_body
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 84

state 51

    (11) id_list -> ID .

    SEMI            reduce using rule 11 (id_list -> ID .)
    COMMA           reduce using rule 11 (id_list -> ID .)


state 52

    (43) assignment -> ID ASSIGN . expr SEMI
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 85

state 53

    (37) function_call -> ID LPAREN . expr_list RPAREN SEMI
    (56) expr_list -> . nonempty_expr_list
    (57) expr_list -> . empty
    (58) nonempty_expr_list -> . nonempty_expr_list COMMA expr
    (59) nonempty_expr_list -> . expr
    (70) empty -> .
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    RPAREN          reduce using rule 70 (empty -> .)
    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr_list                      shift and go to state 86
    nonempty_expr_list             shift and go to state 88
    empty                          shift and go to state 87
    expr                           shift and go to state 89

state 54

    (39) if_statement -> IF LPAREN . expr RPAREN block_body if_false
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 90

state 55

    (29) statement_list -> statement_list statement .

    ID              reduce using rule 29 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 29 (statement_list -> statement_list statement .)
    IF              reduce using rule 29 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 29 (statement_list -> statement_list statement .)
    INT             reduce using rule 29 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 29 (statement_list -> statement_list statement .)
    STRING          reduce using rule 29 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 29 (statement_list -> statement_list statement .)


state 56

    (19) function_definition -> function_header LBRACE block RBRACE .

    VOID            reduce using rule 19 (function_definition -> function_header LBRACE block RBRACE .)
    INT             reduce using rule 19 (function_definition -> function_header LBRACE block RBRACE .)
    CHAR            reduce using rule 19 (function_definition -> function_header LBRACE block RBRACE .)
    STRING          reduce using rule 19 (function_definition -> function_header LBRACE block RBRACE .)
    $end            reduce using rule 19 (function_definition -> function_header LBRACE block RBRACE .)


state 57

    (10) id_list -> id_list COMMA ID .

    SEMI            reduce using rule 10 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 10 (id_list -> id_list COMMA ID .)


state 58

    (17) void_arg_function -> type ID LPAREN VOID . RPAREN

    RPAREN          shift and go to state 91


state 59

    (20) function_header -> type ID LPAREN args . RPAREN
    (22) args -> args . COMMA type ID

    RPAREN          shift and go to state 92
    COMMA           shift and go to state 93


state 60

    (12) function_declaration -> type ID LPAREN arg_types . RPAREN SEMI
    (15) arg_types -> arg_types . COMMA type

    RPAREN          shift and go to state 94
    COMMA           shift and go to state 64


state 61

    (16) arg_types -> type .
    (23) args -> type . ID

    RPAREN          reduce using rule 16 (arg_types -> type .)
    COMMA           reduce using rule 16 (arg_types -> type .)
    ID              shift and go to state 95


state 62

    (18) void_arg_function -> VOID ID LPAREN VOID RPAREN .

    SEMI            reduce using rule 18 (void_arg_function -> VOID ID LPAREN VOID RPAREN .)
    LBRACE          reduce using rule 18 (void_arg_function -> VOID ID LPAREN VOID RPAREN .)


state 63

    (13) function_declaration -> VOID ID LPAREN arg_types RPAREN . SEMI

    SEMI            shift and go to state 96


state 64

    (15) arg_types -> arg_types COMMA . type
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    type                           shift and go to state 97

state 65

    (54) expr -> MINUS expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 54 (expr -> MINUS expr .)
    MINUS           reduce using rule 54 (expr -> MINUS expr .)
    TIMES           reduce using rule 54 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 54 (expr -> MINUS expr .)
    MODULO          reduce using rule 54 (expr -> MINUS expr .)
    OR              reduce using rule 54 (expr -> MINUS expr .)
    AND             reduce using rule 54 (expr -> MINUS expr .)
    EQ              reduce using rule 54 (expr -> MINUS expr .)
    NE              reduce using rule 54 (expr -> MINUS expr .)
    LT              reduce using rule 54 (expr -> MINUS expr .)
    LE              reduce using rule 54 (expr -> MINUS expr .)
    GT              reduce using rule 54 (expr -> MINUS expr .)
    GE              reduce using rule 54 (expr -> MINUS expr .)
    SEMI            reduce using rule 54 (expr -> MINUS expr .)
    RPAREN          reduce using rule 54 (expr -> MINUS expr .)
    COMMA           reduce using rule 54 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 79 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 66

    (60) expr -> LPAREN type . RPAREN expr

    RPAREN          shift and go to state 98


state 67

    (53) expr -> LPAREN expr . RPAREN
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    RPAREN          shift and go to state 99
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 68

    (55) expr -> ID LPAREN . expr_list RPAREN
    (56) expr_list -> . nonempty_expr_list
    (57) expr_list -> . empty
    (58) nonempty_expr_list -> . nonempty_expr_list COMMA expr
    (59) nonempty_expr_list -> . expr
    (70) empty -> .
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    RPAREN          reduce using rule 70 (empty -> .)
    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr_list                      shift and go to state 100
    nonempty_expr_list             shift and go to state 88
    empty                          shift and go to state 87
    expr                           shift and go to state 89

state 69

    (62) expr -> expr AND . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 101

state 70

    (67) expr -> expr LE . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 102

state 71

    (47) expr -> expr DIVIDE . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 103

state 72

    (41) return -> RETURN expr SEMI .

    ID              reduce using rule 41 (return -> RETURN expr SEMI .)
    RETURN          reduce using rule 41 (return -> RETURN expr SEMI .)
    IF              reduce using rule 41 (return -> RETURN expr SEMI .)
    WHILE           reduce using rule 41 (return -> RETURN expr SEMI .)
    INT             reduce using rule 41 (return -> RETURN expr SEMI .)
    CHAR            reduce using rule 41 (return -> RETURN expr SEMI .)
    STRING          reduce using rule 41 (return -> RETURN expr SEMI .)
    RBRACE          reduce using rule 41 (return -> RETURN expr SEMI .)


state 73

    (69) expr -> expr GE . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 104

state 74

    (65) expr -> expr NE . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 105

state 75

    (46) expr -> expr TIMES . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 106

state 76

    (66) expr -> expr LT . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 107

state 77

    (68) expr -> expr GT . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 108

state 78

    (44) expr -> expr PLUS . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 109

state 79

    (48) expr -> expr MODULO . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 110

state 80

    (64) expr -> expr EQ . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 111

state 81

    (45) expr -> expr MINUS . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 112

state 82

    (61) expr -> expr OR . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 113

state 83

    (63) expr -> NOT expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 63 (expr -> NOT expr .)
    MINUS           reduce using rule 63 (expr -> NOT expr .)
    TIMES           reduce using rule 63 (expr -> NOT expr .)
    DIVIDE          reduce using rule 63 (expr -> NOT expr .)
    MODULO          reduce using rule 63 (expr -> NOT expr .)
    OR              reduce using rule 63 (expr -> NOT expr .)
    AND             reduce using rule 63 (expr -> NOT expr .)
    EQ              reduce using rule 63 (expr -> NOT expr .)
    NE              reduce using rule 63 (expr -> NOT expr .)
    LT              reduce using rule 63 (expr -> NOT expr .)
    LE              reduce using rule 63 (expr -> NOT expr .)
    GT              reduce using rule 63 (expr -> NOT expr .)
    GE              reduce using rule 63 (expr -> NOT expr .)
    SEMI            reduce using rule 63 (expr -> NOT expr .)
    RPAREN          reduce using rule 63 (expr -> NOT expr .)
    COMMA           reduce using rule 63 (expr -> NOT expr .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 79 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 84

    (38) loop_statement -> WHILE LPAREN expr . RPAREN block_body
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    RPAREN          shift and go to state 114
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 85

    (43) assignment -> ID ASSIGN expr . SEMI
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    SEMI            shift and go to state 115
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 86

    (37) function_call -> ID LPAREN expr_list . RPAREN SEMI

    RPAREN          shift and go to state 116


state 87

    (57) expr_list -> empty .

    RPAREN          reduce using rule 57 (expr_list -> empty .)


state 88

    (56) expr_list -> nonempty_expr_list .
    (58) nonempty_expr_list -> nonempty_expr_list . COMMA expr

    RPAREN          reduce using rule 56 (expr_list -> nonempty_expr_list .)
    COMMA           shift and go to state 117


state 89

    (59) nonempty_expr_list -> expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    COMMA           reduce using rule 59 (nonempty_expr_list -> expr .)
    RPAREN          reduce using rule 59 (nonempty_expr_list -> expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 90

    (39) if_statement -> IF LPAREN expr . RPAREN block_body if_false
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 91

    (17) void_arg_function -> type ID LPAREN VOID RPAREN .

    SEMI            reduce using rule 17 (void_arg_function -> type ID LPAREN VOID RPAREN .)
    LBRACE          reduce using rule 17 (void_arg_function -> type ID LPAREN VOID RPAREN .)


state 92

    (20) function_header -> type ID LPAREN args RPAREN .

    LBRACE          reduce using rule 20 (function_header -> type ID LPAREN args RPAREN .)


state 93

    (22) args -> args COMMA . type ID
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    type                           shift and go to state 119

state 94

    (12) function_declaration -> type ID LPAREN arg_types RPAREN . SEMI

    SEMI            shift and go to state 120


state 95

    (23) args -> type ID .

    RPAREN          reduce using rule 23 (args -> type ID .)
    COMMA           reduce using rule 23 (args -> type ID .)


state 96

    (13) function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI .

    VOID            reduce using rule 13 (function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI .)
    INT             reduce using rule 13 (function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI .)
    CHAR            reduce using rule 13 (function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI .)
    STRING          reduce using rule 13 (function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI .)
    $end            reduce using rule 13 (function_declaration -> VOID ID LPAREN arg_types RPAREN SEMI .)


state 97

    (15) arg_types -> arg_types COMMA type .

    RPAREN          reduce using rule 15 (arg_types -> arg_types COMMA type .)
    COMMA           reduce using rule 15 (arg_types -> arg_types COMMA type .)


state 98

    (60) expr -> LPAREN type RPAREN . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 121

state 99

    (53) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 53 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 53 (expr -> LPAREN expr RPAREN .)


state 100

    (55) expr -> ID LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 122


state 101

    (62) expr -> expr AND expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 62 (expr -> expr AND expr .)
    AND             reduce using rule 62 (expr -> expr AND expr .)
    SEMI            reduce using rule 62 (expr -> expr AND expr .)
    RPAREN          reduce using rule 62 (expr -> expr AND expr .)
    COMMA           reduce using rule 62 (expr -> expr AND expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73

  ! PLUS            [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! MODULO          [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 62 (expr -> expr AND expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]


state 102

    (67) expr -> expr LE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 67 (expr -> expr LE expr .)
    AND             reduce using rule 67 (expr -> expr LE expr .)
    EQ              reduce using rule 67 (expr -> expr LE expr .)
    NE              reduce using rule 67 (expr -> expr LE expr .)
    LT              reduce using rule 67 (expr -> expr LE expr .)
    LE              reduce using rule 67 (expr -> expr LE expr .)
    GT              reduce using rule 67 (expr -> expr LE expr .)
    GE              reduce using rule 67 (expr -> expr LE expr .)
    SEMI            reduce using rule 67 (expr -> expr LE expr .)
    RPAREN          reduce using rule 67 (expr -> expr LE expr .)
    COMMA           reduce using rule 67 (expr -> expr LE expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79

  ! PLUS            [ reduce using rule 67 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 67 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 67 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 67 (expr -> expr LE expr .) ]
  ! MODULO          [ reduce using rule 67 (expr -> expr LE expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 103

    (47) expr -> expr DIVIDE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 47 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 47 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 47 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 47 (expr -> expr DIVIDE expr .)
    MODULO          reduce using rule 47 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 47 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 47 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 47 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 47 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 47 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 47 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 47 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 47 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 47 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 47 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 47 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 79 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 104

    (69) expr -> expr GE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 69 (expr -> expr GE expr .)
    AND             reduce using rule 69 (expr -> expr GE expr .)
    EQ              reduce using rule 69 (expr -> expr GE expr .)
    NE              reduce using rule 69 (expr -> expr GE expr .)
    LT              reduce using rule 69 (expr -> expr GE expr .)
    LE              reduce using rule 69 (expr -> expr GE expr .)
    GT              reduce using rule 69 (expr -> expr GE expr .)
    GE              reduce using rule 69 (expr -> expr GE expr .)
    SEMI            reduce using rule 69 (expr -> expr GE expr .)
    RPAREN          reduce using rule 69 (expr -> expr GE expr .)
    COMMA           reduce using rule 69 (expr -> expr GE expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79

  ! PLUS            [ reduce using rule 69 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 69 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 69 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 69 (expr -> expr GE expr .) ]
  ! MODULO          [ reduce using rule 69 (expr -> expr GE expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 105

    (65) expr -> expr NE expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 65 (expr -> expr NE expr .)
    AND             reduce using rule 65 (expr -> expr NE expr .)
    EQ              reduce using rule 65 (expr -> expr NE expr .)
    NE              reduce using rule 65 (expr -> expr NE expr .)
    SEMI            reduce using rule 65 (expr -> expr NE expr .)
    RPAREN          reduce using rule 65 (expr -> expr NE expr .)
    COMMA           reduce using rule 65 (expr -> expr NE expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73

  ! PLUS            [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! MODULO          [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 65 (expr -> expr NE expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]


state 106

    (46) expr -> expr TIMES expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 46 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 46 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 46 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 46 (expr -> expr TIMES expr .)
    MODULO          reduce using rule 46 (expr -> expr TIMES expr .)
    OR              reduce using rule 46 (expr -> expr TIMES expr .)
    AND             reduce using rule 46 (expr -> expr TIMES expr .)
    EQ              reduce using rule 46 (expr -> expr TIMES expr .)
    NE              reduce using rule 46 (expr -> expr TIMES expr .)
    LT              reduce using rule 46 (expr -> expr TIMES expr .)
    LE              reduce using rule 46 (expr -> expr TIMES expr .)
    GT              reduce using rule 46 (expr -> expr TIMES expr .)
    GE              reduce using rule 46 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 46 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 46 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 46 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 79 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 107

    (66) expr -> expr LT expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 66 (expr -> expr LT expr .)
    AND             reduce using rule 66 (expr -> expr LT expr .)
    EQ              reduce using rule 66 (expr -> expr LT expr .)
    NE              reduce using rule 66 (expr -> expr LT expr .)
    LT              reduce using rule 66 (expr -> expr LT expr .)
    LE              reduce using rule 66 (expr -> expr LT expr .)
    GT              reduce using rule 66 (expr -> expr LT expr .)
    GE              reduce using rule 66 (expr -> expr LT expr .)
    SEMI            reduce using rule 66 (expr -> expr LT expr .)
    RPAREN          reduce using rule 66 (expr -> expr LT expr .)
    COMMA           reduce using rule 66 (expr -> expr LT expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79

  ! PLUS            [ reduce using rule 66 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 66 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 66 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 66 (expr -> expr LT expr .) ]
  ! MODULO          [ reduce using rule 66 (expr -> expr LT expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 108

    (68) expr -> expr GT expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 68 (expr -> expr GT expr .)
    AND             reduce using rule 68 (expr -> expr GT expr .)
    EQ              reduce using rule 68 (expr -> expr GT expr .)
    NE              reduce using rule 68 (expr -> expr GT expr .)
    LT              reduce using rule 68 (expr -> expr GT expr .)
    LE              reduce using rule 68 (expr -> expr GT expr .)
    GT              reduce using rule 68 (expr -> expr GT expr .)
    GE              reduce using rule 68 (expr -> expr GT expr .)
    SEMI            reduce using rule 68 (expr -> expr GT expr .)
    RPAREN          reduce using rule 68 (expr -> expr GT expr .)
    COMMA           reduce using rule 68 (expr -> expr GT expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79

  ! PLUS            [ reduce using rule 68 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 68 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 68 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 68 (expr -> expr GT expr .) ]
  ! MODULO          [ reduce using rule 68 (expr -> expr GT expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 109

    (44) expr -> expr PLUS expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 44 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 44 (expr -> expr PLUS expr .)
    OR              reduce using rule 44 (expr -> expr PLUS expr .)
    AND             reduce using rule 44 (expr -> expr PLUS expr .)
    EQ              reduce using rule 44 (expr -> expr PLUS expr .)
    NE              reduce using rule 44 (expr -> expr PLUS expr .)
    LT              reduce using rule 44 (expr -> expr PLUS expr .)
    LE              reduce using rule 44 (expr -> expr PLUS expr .)
    GT              reduce using rule 44 (expr -> expr PLUS expr .)
    GE              reduce using rule 44 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 44 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 44 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 44 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79

  ! TIMES           [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! MODULO          [ reduce using rule 44 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 110

    (48) expr -> expr MODULO expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 48 (expr -> expr MODULO expr .)
    MINUS           reduce using rule 48 (expr -> expr MODULO expr .)
    TIMES           reduce using rule 48 (expr -> expr MODULO expr .)
    DIVIDE          reduce using rule 48 (expr -> expr MODULO expr .)
    MODULO          reduce using rule 48 (expr -> expr MODULO expr .)
    OR              reduce using rule 48 (expr -> expr MODULO expr .)
    AND             reduce using rule 48 (expr -> expr MODULO expr .)
    EQ              reduce using rule 48 (expr -> expr MODULO expr .)
    NE              reduce using rule 48 (expr -> expr MODULO expr .)
    LT              reduce using rule 48 (expr -> expr MODULO expr .)
    LE              reduce using rule 48 (expr -> expr MODULO expr .)
    GT              reduce using rule 48 (expr -> expr MODULO expr .)
    GE              reduce using rule 48 (expr -> expr MODULO expr .)
    SEMI            reduce using rule 48 (expr -> expr MODULO expr .)
    RPAREN          reduce using rule 48 (expr -> expr MODULO expr .)
    COMMA           reduce using rule 48 (expr -> expr MODULO expr .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 79 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 111

    (64) expr -> expr EQ expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 64 (expr -> expr EQ expr .)
    AND             reduce using rule 64 (expr -> expr EQ expr .)
    EQ              reduce using rule 64 (expr -> expr EQ expr .)
    NE              reduce using rule 64 (expr -> expr EQ expr .)
    SEMI            reduce using rule 64 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 64 (expr -> expr EQ expr .)
    COMMA           reduce using rule 64 (expr -> expr EQ expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73

  ! PLUS            [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! MODULO          [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 64 (expr -> expr EQ expr .) ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]


state 112

    (45) expr -> expr MINUS expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 45 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 45 (expr -> expr MINUS expr .)
    OR              reduce using rule 45 (expr -> expr MINUS expr .)
    AND             reduce using rule 45 (expr -> expr MINUS expr .)
    EQ              reduce using rule 45 (expr -> expr MINUS expr .)
    NE              reduce using rule 45 (expr -> expr MINUS expr .)
    LT              reduce using rule 45 (expr -> expr MINUS expr .)
    LE              reduce using rule 45 (expr -> expr MINUS expr .)
    GT              reduce using rule 45 (expr -> expr MINUS expr .)
    GE              reduce using rule 45 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 45 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 45 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 45 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79

  ! TIMES           [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! MODULO          [ reduce using rule 45 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 113

    (61) expr -> expr OR expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    OR              reduce using rule 61 (expr -> expr OR expr .)
    SEMI            reduce using rule 61 (expr -> expr OR expr .)
    RPAREN          reduce using rule 61 (expr -> expr OR expr .)
    COMMA           reduce using rule 61 (expr -> expr OR expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73

  ! PLUS            [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! MODULO          [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 61 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 82 ]


state 114

    (38) loop_statement -> WHILE LPAREN expr RPAREN . block_body
    (26) block_body -> . block_start block_end
    (27) block_start -> . LBRACE

    LBRACE          shift and go to state 123

    block_body                     shift and go to state 125
    block_start                    shift and go to state 124

state 115

    (43) assignment -> ID ASSIGN expr SEMI .

    ID              reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    RETURN          reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    IF              reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    WHILE           reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    INT             reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    CHAR            reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    STRING          reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)
    RBRACE          reduce using rule 43 (assignment -> ID ASSIGN expr SEMI .)


state 116

    (37) function_call -> ID LPAREN expr_list RPAREN . SEMI

    SEMI            shift and go to state 126


state 117

    (58) nonempty_expr_list -> nonempty_expr_list COMMA . expr
    (44) expr -> . expr PLUS expr
    (45) expr -> . expr MINUS expr
    (46) expr -> . expr TIMES expr
    (47) expr -> . expr DIVIDE expr
    (48) expr -> . expr MODULO expr
    (49) expr -> . CINT
    (50) expr -> . CCHAR
    (51) expr -> . CSTRING
    (52) expr -> . ID
    (53) expr -> . LPAREN expr RPAREN
    (54) expr -> . MINUS expr
    (55) expr -> . ID LPAREN expr_list RPAREN
    (60) expr -> . LPAREN type RPAREN expr
    (61) expr -> . expr OR expr
    (62) expr -> . expr AND expr
    (63) expr -> . NOT expr
    (64) expr -> . expr EQ expr
    (65) expr -> . expr NE expr
    (66) expr -> . expr LT expr
    (67) expr -> . expr LE expr
    (68) expr -> . expr GT expr
    (69) expr -> . expr GE expr

    CINT            shift and go to state 49
    CCHAR           shift and go to state 42
    CSTRING         shift and go to state 44
    ID              shift and go to state 46
    LPAREN          shift and go to state 45
    MINUS           shift and go to state 41
    NOT             shift and go to state 48

    expr                           shift and go to state 127

state 118

    (39) if_statement -> IF LPAREN expr RPAREN . block_body if_false
    (26) block_body -> . block_start block_end
    (27) block_start -> . LBRACE

    LBRACE          shift and go to state 123

    block_body                     shift and go to state 128
    block_start                    shift and go to state 124

state 119

    (22) args -> args COMMA type . ID

    ID              shift and go to state 129


state 120

    (12) function_declaration -> type ID LPAREN arg_types RPAREN SEMI .

    VOID            reduce using rule 12 (function_declaration -> type ID LPAREN arg_types RPAREN SEMI .)
    INT             reduce using rule 12 (function_declaration -> type ID LPAREN arg_types RPAREN SEMI .)
    CHAR            reduce using rule 12 (function_declaration -> type ID LPAREN arg_types RPAREN SEMI .)
    STRING          reduce using rule 12 (function_declaration -> type ID LPAREN arg_types RPAREN SEMI .)
    $end            reduce using rule 12 (function_declaration -> type ID LPAREN arg_types RPAREN SEMI .)


state 121

    (60) expr -> LPAREN type RPAREN expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    PLUS            reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    MINUS           reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    TIMES           reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    DIVIDE          reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    MODULO          reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    OR              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    AND             reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    EQ              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    NE              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    LT              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    LE              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    GT              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    GE              reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    SEMI            reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    RPAREN          reduce using rule 60 (expr -> LPAREN type RPAREN expr .)
    COMMA           reduce using rule 60 (expr -> LPAREN type RPAREN expr .)

  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 81 ]
  ! TIMES           [ shift and go to state 75 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 79 ]
  ! OR              [ shift and go to state 82 ]
  ! AND             [ shift and go to state 69 ]
  ! EQ              [ shift and go to state 80 ]
  ! NE              [ shift and go to state 74 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 70 ]
  ! GT              [ shift and go to state 77 ]
  ! GE              [ shift and go to state 73 ]


state 122

    (55) expr -> ID LPAREN expr_list RPAREN .

    PLUS            reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    TIMES           reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    DIVIDE          reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    MODULO          reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    OR              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    AND             reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    EQ              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    NE              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    LT              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    LE              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    GT              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    GE              reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    SEMI            reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 55 (expr -> ID LPAREN expr_list RPAREN .)


state 123

    (27) block_start -> LBRACE .

    ID              reduce using rule 27 (block_start -> LBRACE .)
    RETURN          reduce using rule 27 (block_start -> LBRACE .)
    IF              reduce using rule 27 (block_start -> LBRACE .)
    WHILE           reduce using rule 27 (block_start -> LBRACE .)
    INT             reduce using rule 27 (block_start -> LBRACE .)
    CHAR            reduce using rule 27 (block_start -> LBRACE .)
    STRING          reduce using rule 27 (block_start -> LBRACE .)
    RBRACE          reduce using rule 27 (block_start -> LBRACE .)


state 124

    (26) block_body -> block_start . block_end
    (28) block_end -> . block RBRACE
    (24) block -> . empty
    (25) block -> . statement_list
    (70) empty -> .
    (29) statement_list -> . statement_list statement
    (30) statement_list -> . statement
    (31) statement -> . variable_declaration
    (32) statement -> . assignment
    (33) statement -> . return
    (34) statement -> . if_statement
    (35) statement -> . loop_statement
    (36) statement -> . function_call
    (6) variable_declaration -> . type id_list SEMI
    (43) assignment -> . ID ASSIGN expr SEMI
    (41) return -> . RETURN expr SEMI
    (42) return -> . RETURN SEMI
    (39) if_statement -> . IF LPAREN expr RPAREN block_body if_false
    (38) loop_statement -> . WHILE LPAREN expr RPAREN block_body
    (37) function_call -> . ID LPAREN expr_list RPAREN SEMI
    (7) type -> . INT
    (8) type -> . CHAR
    (9) type -> . STRING

    RBRACE          reduce using rule 70 (empty -> .)
    ID              shift and go to state 31
    RETURN          shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 23
    INT             shift and go to state 12
    CHAR            shift and go to state 2
    STRING          shift and go to state 8

    block_end                      shift and go to state 130
    loop_statement                 shift and go to state 21
    assignment                     shift and go to state 30
    function_call                  shift and go to state 22
    block                          shift and go to state 131
    statement                      shift and go to state 25
    statement_list                 shift and go to state 33
    return                         shift and go to state 29
    if_statement                   shift and go to state 26
    type                           shift and go to state 27
    variable_declaration           shift and go to state 24
    empty                          shift and go to state 28

state 125

    (38) loop_statement -> WHILE LPAREN expr RPAREN block_body .

    ID              reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    RETURN          reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    IF              reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    WHILE           reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    INT             reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    CHAR            reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    STRING          reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)
    RBRACE          reduce using rule 38 (loop_statement -> WHILE LPAREN expr RPAREN block_body .)


state 126

    (37) function_call -> ID LPAREN expr_list RPAREN SEMI .

    ID              reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    RETURN          reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    IF              reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    WHILE           reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    INT             reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    CHAR            reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    STRING          reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)
    RBRACE          reduce using rule 37 (function_call -> ID LPAREN expr_list RPAREN SEMI .)


state 127

    (58) nonempty_expr_list -> nonempty_expr_list COMMA expr .
    (44) expr -> expr . PLUS expr
    (45) expr -> expr . MINUS expr
    (46) expr -> expr . TIMES expr
    (47) expr -> expr . DIVIDE expr
    (48) expr -> expr . MODULO expr
    (61) expr -> expr . OR expr
    (62) expr -> expr . AND expr
    (64) expr -> expr . EQ expr
    (65) expr -> expr . NE expr
    (66) expr -> expr . LT expr
    (67) expr -> expr . LE expr
    (68) expr -> expr . GT expr
    (69) expr -> expr . GE expr

    COMMA           reduce using rule 58 (nonempty_expr_list -> nonempty_expr_list COMMA expr .)
    RPAREN          reduce using rule 58 (nonempty_expr_list -> nonempty_expr_list COMMA expr .)
    PLUS            shift and go to state 78
    MINUS           shift and go to state 81
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 79
    OR              shift and go to state 82
    AND             shift and go to state 69
    EQ              shift and go to state 80
    NE              shift and go to state 74
    LT              shift and go to state 76
    LE              shift and go to state 70
    GT              shift and go to state 77
    GE              shift and go to state 73


state 128

    (39) if_statement -> IF LPAREN expr RPAREN block_body . if_false
    (40) if_false -> . ELSE block_body

    ELSE            shift and go to state 133

    if_false                       shift and go to state 132

state 129

    (22) args -> args COMMA type ID .

    RPAREN          reduce using rule 22 (args -> args COMMA type ID .)
    COMMA           reduce using rule 22 (args -> args COMMA type ID .)


state 130

    (26) block_body -> block_start block_end .

    ID              reduce using rule 26 (block_body -> block_start block_end .)
    RETURN          reduce using rule 26 (block_body -> block_start block_end .)
    IF              reduce using rule 26 (block_body -> block_start block_end .)
    WHILE           reduce using rule 26 (block_body -> block_start block_end .)
    INT             reduce using rule 26 (block_body -> block_start block_end .)
    CHAR            reduce using rule 26 (block_body -> block_start block_end .)
    STRING          reduce using rule 26 (block_body -> block_start block_end .)
    RBRACE          reduce using rule 26 (block_body -> block_start block_end .)
    ELSE            reduce using rule 26 (block_body -> block_start block_end .)


state 131

    (28) block_end -> block . RBRACE

    RBRACE          shift and go to state 134


state 132

    (39) if_statement -> IF LPAREN expr RPAREN block_body if_false .

    ID              reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    RETURN          reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    IF              reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    WHILE           reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    INT             reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    CHAR            reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    STRING          reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)
    RBRACE          reduce using rule 39 (if_statement -> IF LPAREN expr RPAREN block_body if_false .)


state 133

    (40) if_false -> ELSE . block_body
    (26) block_body -> . block_start block_end
    (27) block_start -> . LBRACE

    LBRACE          shift and go to state 123

    block_body                     shift and go to state 135
    block_start                    shift and go to state 124

state 134

    (28) block_end -> block RBRACE .

    ID              reduce using rule 28 (block_end -> block RBRACE .)
    RETURN          reduce using rule 28 (block_end -> block RBRACE .)
    IF              reduce using rule 28 (block_end -> block RBRACE .)
    WHILE           reduce using rule 28 (block_end -> block RBRACE .)
    INT             reduce using rule 28 (block_end -> block RBRACE .)
    CHAR            reduce using rule 28 (block_end -> block RBRACE .)
    STRING          reduce using rule 28 (block_end -> block RBRACE .)
    RBRACE          reduce using rule 28 (block_end -> block RBRACE .)
    ELSE            reduce using rule 28 (block_end -> block RBRACE .)


state 135

    (40) if_false -> ELSE block_body .

    ID              reduce using rule 40 (if_false -> ELSE block_body .)
    RETURN          reduce using rule 40 (if_false -> ELSE block_body .)
    IF              reduce using rule 40 (if_false -> ELSE block_body .)
    WHILE           reduce using rule 40 (if_false -> ELSE block_body .)
    INT             reduce using rule 40 (if_false -> ELSE block_body .)
    CHAR            reduce using rule 40 (if_false -> ELSE block_body .)
    STRING          reduce using rule 40 (if_false -> ELSE block_body .)
    RBRACE          reduce using rule 40 (if_false -> ELSE block_body .)

